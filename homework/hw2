#有使用老師給的程式

import random

citys = [
    (0,3),(0,0),
    (0,2),(0,1),
    (1,0),(1,3),
    (2,0),(2,3),
    (3,0),(3,3),
    (3,1),(3,2)
]

def distance(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return ((x2-x1)**2+(y2-y1)**2)**0.5

def pathLength(p):
    dist = 0
    plen = len(p)
    for i in range(plen):
        dist += distance(citys[i], citys[p[i]])
    return dist

def macroAlgorithm(citys, iterations):
    l = len(citys)
    path = [(i+1)%l for i in range(l)]
    minPath = path
    minDist = pathLength(path)
    
    for _ in range(iterations):
        i = random.randint(1, l-1)
        j = random.randint(1, l-1)
        newPath = path[:]
        newPath[i], newPath[j] = newPath[j], newPath[i]
        newDist = pathLength(newPath)
        
        if newDist < minDist:
            minPath = newPath
            minDist = newDist
    
    return minPath

iterations = 10000
minPath = macroAlgorithm(citys, iterations)
minDist = pathLength(minPath)

print('Minimized path:', minPath)
print('Minimized distance:', minDist)
